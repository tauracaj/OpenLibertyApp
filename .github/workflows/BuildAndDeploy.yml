name: Build and Deploy Java App Open Liberty App

on:
  workflow_dispatch:
    tags:
      - 'v*.*.*'  
    inputs:
      acrName: 
        description: "ACR name"
        required: true
      appNamespace:
        description: "Open Liberty App namespace"
        required: true
      clusterName: 
        description: "AKS cluster name"
        required: true
      clusterRGName: 
        description: "AKS cluster resource group name"
        required: true
  repository_dispatch:

env:
    azCliVersion: 2.42.0
    ARM_CLIENT_ID: ${{ secrets.TF_VAR_client_id }}
    ARM_CLIENT_SECRET: ${{ secrets.TF_VAR_client_secret }}    

jobs:
    build-app:
        environment: Test-Env
        runs-on: ubuntu-latest
        steps:
            - name: Checkout from GitHub 
              uses: actions/checkout@v3

            - name: Set up JDK 11
              uses: actions/setup-java@v3
              with:
                java-version: '11'
                distribution: 'adopt'

            - name: GitHub Tag Name example
              run: |
                echo "Tag name from GITHUB_REF_NAME: $GITHUB_REF_NAME"
                echo "Tag name from github.ref_name: ${{  github.ref_name }}"   

            - name: Set up Docker BuildX
              uses: docker/setup-buildx-action@v2

            - name: Cache Docker layers
              uses: actions/cache@v3
              with:
                path: /tmp/.buildx-cache
                key: ${{ runner.os }}-buildx-${{ github.sha }}
                restore-keys: |
                  ${{ runner.os }}-buildx-

            - name: Setup environment variables
              run: |
                echo "LOGIN_SERVER"=${{ github.event.inputs.acrName }}.azurecr.io >> $GITHUB_ENV
                echo "REGISTRY_NAME"=${{ github.event.inputs.acrName }} >> $GITHUB_ENV
                echo "USER_NAME"=${{ github.event.inputs.acrName }} >> $GITHUB_ENV
                echo "GHRUNNUMBER"=${{ github.ref_name }} >> $GITHUB_ENV

            
            - name: Build Open Liberty Project
              run: |
                mvn -B package --file pom.xml
                mkdir staging && cp --recursive target/* staging 
                
                export LOGIN_SERVER=$LOGIN_SERVER
                export REGISTRY_NAME=$REGISTRY_NAME
                export USER_NAME=$USER_NAME   
                export GHRUNNUMBER=$GHRUNNUMBER  

            - name: Persist workflow data as artificats
              uses: actions/upload-artifact@v3
              with:
                name: github-actions-artifact
                path: staging
                retention-days: 7                               
               
            - uses: azure/login@v1
              id: azure-login
              with:
                creds: '{"clientId":"${{ secrets.TF_VAR_client_id }}","clientSecret":"${{ secrets.TF_VAR_client_secret }}","subscriptionId":"${{ secrets.TF_VAR_subscription_id }}","tenantId":"${{ secrets.TF_VAR_tenant_id }}"}'

            - name: Log into Container Registry
              uses: docker/login-action@v2
              with:
                registry: ${{ github.event.inputs.acrName }}.azurecr.io
                username: ${{ secrets.TF_VAR_client_id }}
                password: ${{ secrets.TF_VAR_client_secret }}
           
            - name: Read Image Name and Version from the Solution
              id: img_name_version
              run: |
                # Fetch maven artifactId as image name, maven build version as image version
                export IMAGE_NAME=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.artifactId}' --non-recursive exec:exec)
                export IMAGE_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)

                echo $IMAGE_NAME $IMAGE_VERSION
                echo "IMAGE_NAME"=$IMAGE_NAME >> $GITHUB_ENV
                echo "IMAGE_VERSION"=$IMAGE_VERSION >> $GITHUB_ENV
                #echo "img_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
                #echo "img_version=${IMAGE_VERSION}" >> $GITHUB_OUTPUT

                
            - name: Build and push
              uses: docker/build-push-action@v3
              with:
                context: .
                file: target/Dockerfile
                push: true
                tags: | 
                  ${{ env.LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}${{  env.GHRUNNUMBER }}
                  ${{ env.LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
                cache-from: type=local,src=/tmp/.buildx-cache
                cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

            - name: Scan image
              id: scan 
              uses: anchore/scan-action@v3
              with:
                image: "${{ env.LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest"
                fail-build: false
                #severity-cutoff: critical

            - name: Upload Anchore scan SARIF report
              uses: github/codeql-action/upload-sarif@v2
              with:
                sarif_file: ${{ steps.scan.outputs.sarif }}  

            - name: Inspect action SARIF report
              run: cat ${{ steps.scan.outputs.sarif }}                

            - name: Archive openlibertyapplication-agic.yaml
              uses: actions/upload-artifact@v1
              with:
                name: archivefiles
                path: target/openlibertyapplication-agic.yaml

            - name: Set AKS context
              id: set-context
              uses: azure/aks-set-context@v3
              with:
                resource-group: '${{ github.event.inputs.clusterRGName }}' 
                cluster-name: '${{ github.event.inputs.clusterName }}'
                admin: true

            - name: Setup kubectl
              id: install-kubectl
              uses: azure/setup-kubectl@v3
              
            - name: Deploy to AKS
              id: deploy-aks
              uses: Azure/k8s-deploy@v4
              with:
                action: deploy
                strategy: blue-green
                namespace: '${{ github.event.inputs.appNamespace }}'
                resource-group: '${{ github.event.inputs.clusterRGName }}'
                name: '${{ github.event.inputs.clusterName }}'
                manifests: |
                  target/openlibertyapplication-agic.yaml
                images: '${{ env.LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}${{  env.GHRUNNUMBER }}'
                
    